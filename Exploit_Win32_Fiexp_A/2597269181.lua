local L0_0, L1_1, L2_2, L3_3, L4_4, L5_5
L0_0 = mp
L0_0 = L0_0.bitxor
L1_1 = headerpage
L1_1 = L1_1[1]
L2_2 = headerpage
L2_2 = L2_2[5]
L0_0 = L0_0(L1_1, L2_2)
if L0_0 ~= 70 then
  L0_0 = mp
  L0_0 = L0_0.CLEAN
  return L0_0
end
L0_0 = mp
L0_0 = L0_0.bitxor
L1_1 = headerpage
L1_1 = L1_1[2]
L2_2 = headerpage
L2_2 = L2_2[6]
L0_0 = L0_0(L1_1, L2_2)
if L0_0 ~= 83 then
  L0_0 = mp
  L0_0 = L0_0.CLEAN
  return L0_0
end
L0_0 = mp
L0_0 = L0_0.bitxor
L1_1 = headerpage
L1_1 = L1_1[3]
L2_2 = headerpage
L2_2 = L2_2[7]
L0_0 = L0_0(L1_1, L2_2)
if L0_0 ~= 84 then
  L0_0 = mp
  L0_0 = L0_0.CLEAN
  return L0_0
end
L0_0 = mp
L0_0 = L0_0.bitxor
L1_1 = headerpage
L1_1 = L1_1[4]
L2_2 = headerpage
L2_2 = L2_2[8]
L0_0 = L0_0(L1_1, L2_2)
if L0_0 ~= 80 then
  L0_0 = mp
  L0_0 = L0_0.CLEAN
  return L0_0
end
L0_0 = mp
L0_0 = L0_0.readu_u32
L1_1 = headerpage
L2_2 = 1
L0_0 = L0_0(L1_1, L2_2)
L1_1 = mp
L1_1 = L1_1.getfilesize
L1_1 = L1_1()
if L1_1 > 12582912 or L1_1 < 4096 then
  L2_2 = mp
  L2_2 = L2_2.CLEAN
  return L2_2
end
L2_2 = mp
L2_2 = L2_2.bitxor
L3_3 = L0_0
L4_4 = mp
L4_4 = L4_4.readu_u32
L5_5 = headerpage
L5_5 = L4_4(L5_5, 9)
L2_2 = L2_2(L3_3, L4_4, L5_5, L4_4(L5_5, 9))
if L2_2 > 12582912 then
  L2_2 = mp
  L2_2 = L2_2.CLEAN
  return L2_2
end
L2_2 = headerpage
L2_2 = L2_2[18]
L3_3 = mp
L3_3 = L3_3.bitand
L4_4 = headerpage
L5_5 = 17 + L2_2
L4_4 = L4_4[L5_5]
L4_4 = L2_2 + L4_4
L5_5 = 255
L3_3 = L3_3(L4_4, L5_5)
L3_3 = 17 + L3_3
L4_4 = mp
L4_4 = L4_4.readu_u16
L5_5 = headerpage
L4_4 = L4_4(L5_5, L3_3)
L5_5 = mp
L5_5 = L5_5.bitxor
L5_5 = L5_5(headerpage[273], L4_4)
L5_5 = mp.bitand(L5_5, 255)
if L5_5 > 36 or L5_5 < 12 then
  return mp.CLEAN
end
mp.set_mpattribute("Lua:FiexpEncPayload.A")
if L0_0 ~= 0 and mp.bitxor(L0_0, mp.readu_u32(headerpage, 9)) == L1_1 then
  return mp.INFECTED
end
return mp.CLEAN
