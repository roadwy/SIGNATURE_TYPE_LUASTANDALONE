local L0_0, L1_1, L2_2, L3_3, L4_4, L5_5, L6_6, L7_7, L8_8
function L0_0(A0_9)
  local L1_10, L2_11
  L1_10 = string
  L1_10 = L1_10.gsub
  L2_11 = A0_9
  L1_10 = L1_10(L2_11, "([^%z])%z", "%1")
  L2_11 = {}
  L2_11["%2b"] = "+"
  L2_11["%2B"] = "+"
  L2_11["%2d"] = "+"
  L2_11["%2D"] = "+"
  L2_11["-"] = "+"
  L2_11["%2f"] = "/"
  L2_11["%2F"] = "/"
  L2_11["%5f"] = "/"
  L2_11["%5F"] = "/"
  L2_11._ = "/"
  L2_11["%3d"] = "="
  L2_11["%3D"] = "="
  L2_11["&#34;"] = "\""
  L2_11["&gt;"] = ">"
  L2_11["&lt;"] = "<"
  return string.gsub(L1_10, "([%%&#%-_][%%&#]?[235gl]?[4bBdDfFt]?;?)", L2_11)
end
function L1_1(A0_12, A1_13)
  local L2_14, L3_15, L4_16, L5_17, L6_18, L7_19, L8_20, L9_21, L10_22, L11_23, L12_24, L13_25, L14_26, L15_27
  L2_14 = 10
  L3_15 = 5
  L4_16 = A1_13 or L3_15
  L4_16 = L4_16 - 1
  L5_17 = {}
  if L4_16 >= 0 and L3_15 > L4_16 then
    for L9_21 in L6_18(L7_19, L8_20) do
      L10_22 = #L9_21
      if L10_22 >= 100 then
        L10_22 = #L9_21
        L10_22 = L10_22 % 4
        if L10_22 >= 1 then
          L10_22 = L9_21
          L9_21 = L10_22 .. L11_23
        end
        L10_22 = _UPVALUE1_
        L10_22 = L10_22(L11_23, L12_24)
        if L2_14 <= L11_23 then
          L11_23(L12_24, L13_25)
        else
          for L14_26, L15_27 in L11_23(L12_24) do
            table.insert(L5_17, L15_27)
          end
        end
      end
    end
  end
  if L6_18 ~= A0_12 then
    L6_18(L7_19, L8_20)
  end
  return L5_17
end
function L2_2(A0_28)
  local L1_29, L2_30, L3_31, L4_32, L5_33, L6_34, L7_35, L8_36, L9_37, L10_38, L11_39, L12_40, L13_41, L14_42, L15_43
  L1_29 = _UPVALUE0_
  L2_30 = A0_28
  L1_29 = L1_29(L2_30)
  L2_30 = {}
  L3_31 = {}
  L3_31.Command1 = "FileName['\"]?:%s-['\"]?(.-)['\"]?,%s-['\"]?Arguments['\"]?:%s-['\"]?(.-)['\"]?%s-}"
  L3_31.Command2 = "MethodName.-Start.-MethodParameters.->.->(.-)</.->.->(.-)</"
  L3_31.Command3 = "MethodParameters['\"]:%s-{.-$values['\"]:%s-%[['\"](.-)['\"],%s-['\"](.-)['\"]%]%s-}"
  L3_31.Command4 = "Arguments=\"(.-)\" %u%a+=.*FileName=\"(.-)\" ?/"
  L3_31.Command5 = "Arguments\" value=\"(.-)\"%s-/>.-FileName\" value=\"(.-)\"%s-/>"
  L3_31.Command6 = "Assembly.-Items.-String%[%].->.->(.-)</.->.->(.-)</"
  L3_31.Command7 = "DelegateSerializationHolder..?%z%z%z..%z%z%z.%z%z%z..%z%z%z.(.-)..%z%z%z.(.-)..%z%z%z"
  L3_31.DLL1 = "(MZ.-I%zn%zt%ze%zr%zn%za%zl%zN%za%zm%ze%z(.-)%z%z%z.-)%z.%w-%.?UnitySerializationHolder"
  L3_31.DLL2 = "(MZ.-I%zn%zt%ze%zr%zn%za%zl%zN%za%zm%ze%z(.-)%z%z%z.-%z+)$"
  for L7_35, L8_36 in L4_32(L5_33) do
    if L12_40 == nil then
      L13_41 = string
      L13_41 = L13_41.find
      L14_42 = A0_28
      L15_43 = L8_36
      L15_43 = L13_41(L14_42, L15_43)
    end
    if L12_40 ~= nil then
      L13_41 = ""
      L14_42 = "<<"
      L15_43 = string
      L15_43 = L15_43.rep
      L15_43 = L15_43("0", 5 - #tostring(L9_37))
      L14_42 = L14_42 .. L15_43 .. L9_37 .. string.rep("0", 5 - #tostring(L10_38)) .. L10_38 .. ">>"
      L15_43 = string
      L15_43 = L15_43.find
      L15_43 = L15_43(L7_35, "DLL", 1, true)
      if L15_43 ~= nil then
        L15_43 = L12_40
        L13_41 = L15_43 .. " (SHA256 " .. crypto.Sha256Buffer(L11_39, 0, #L11_39) .. ")"
        L15_43 = mp
        L15_43 = L15_43.vfo_add_buffer
        L15_43(L11_39, "[EmbeddedDLL:" .. L12_40:gsub("%c", "") .. "]", mp.ADD_VFO_TAKE_ACTION_ON_DAD)
      else
        L15_43 = string
        L15_43 = L15_43.find
        L15_43 = L15_43(L7_35, "Command[123]")
        if L15_43 ~= nil then
          L15_43 = L11_39
          L13_41 = L15_43 .. " " .. L12_40
        else
          L15_43 = L12_40
          L13_41 = L15_43 .. " " .. L11_39
        end
        L15_43 = sysio
        L15_43 = L15_43.CommandLineScan
        L15_43 = L15_43(L13_41:gsub("%z", ""), 0)
        if L15_43 == true then
          L15_43 = "Malicious "
        end
      end
      L15_43 = table
      L15_43 = L15_43.insert
      L15_43(L2_30, L14_42 .. "[" .. L7_35:gsub("%d$", "") .. "] " .. L13_41:gsub("%z", ""))
    end
  end
  L4_32(L5_33)
  L6_34.BinaryFormatter = "%z\001%z%z%z"
  L6_34.DataContractSerializer = "<root%s-type"
  L6_34.DataContractSerializer2 = "datacontract.-Serialization"
  L6_34.FsPickler = "{.-FsPickler"
  L6_34.JavaScriptSerializer = "{.-__type"
  L6_34.JsonNet = "{.-$type"
  L6_34.LosFormatter = "\255\001"
  L6_34.NetDataContractSerializer = "<.-:Assembly%s*="
  L6_34.SharpSerializerXml = "<Complex.-Properties"
  L6_34.SoapFormatter = "<[%s\"']-SOAP"
  L6_34.Xaml4 = "xml.-/xaml"
  L6_34.XmlSerializer2 = "xml.-XMLSchema"
  L6_34.YamlDotNet = "!<!"
  for L10_38, L11_39 in L7_35(L8_36) do
    L13_41 = A0_28
    L14_42 = L11_39
    L13_41 = L12_40(L13_41, L14_42)
    if L12_40 == nil then
      L14_42 = string
      L14_42 = L14_42.find
      L15_43 = L1_29
      L15_43 = L14_42(L15_43, L11_39)
      L13_41 = L15_43
    end
    if L12_40 ~= nil then
      L14_42 = string
      L14_42 = L14_42.rep
      L15_43 = "0"
      L14_42 = L14_42(L15_43, 5 - #tostring(L12_40))
      L15_43 = L12_40
      L14_42 = L14_42 .. L15_43 .. string.rep("0", 5 - #tostring(L13_41)) .. L13_41
      L15_43 = table
      L15_43 = L15_43.insert
      L15_43(L5_33, L14_42 .. " " .. L10_38)
    end
  end
  L7_35(L8_36)
  L9_37.ActivitySurrogateDisableTypeCheck = "GetField.*disableActivitySurrogateSelectorTypeCheck.*SetValue.*setMethod"
  L9_37.ActivitySurrogateSelector = "ActivitySurrogateSelector.*ObjectSurrogate.*ObjectSerializedRef"
  L9_37.AxHostState = "Forms.*AxHost.*State"
  L9_37.ClaimsIdentity = "ClaimsIdentity.*m_serializedClaims"
  L9_37.ClaimsPrincipal = "ClaimsPrincipal.*m_serializedClaimsIdentities"
  L9_37.DataSet = "DataSet.*RemotingFormat"
  L9_37.ObjectDataProvider = "ObjectDataProvider.*MethodName"
  L9_37.ObjectDataProvider2 = "ObjectDataProvider.*ObjectInstance"
  L9_37.PSObject = "Automation.*CimInstance.*RunspaceInvoke"
  L9_37.ResourceSet = "ResourceSet.*Hashtable"
  L9_37.RolePrincipal = "RolePrincipal.*ClaimsPrincipal.*Identities"
  L9_37.SessionSecurityToken = "SecurityContextToken.*ClaimsPrincipal.*BootStrapToken"
  L9_37.SessionViewStateHistoryItem = "SessionViewState.*SessionViewStateHistoryItem"
  L9_37.TextFormattingRunProperties = "TextFormattingRunProperties.*ForegroundBrush"
  L9_37.TextMessagingHostingData = "ApplicationLogic.*TextMessaging.*HostingData.*TextMessagingHostingData"
  L9_37.ToolboxItemContainer = "Design.*ToolboxItemContainer"
  L9_37.TypeConfuseDelegate = "DelegateSerializationHolder.*targetTypeAssembly"
  L9_37.TypeConfuseDelegateMono = "DelegateSerializationHolder.*MemberInfoSerializationHolder.*targetTypeAssembly"
  L9_37.WindowsClaimsIdentity = "WindowsClaimsIdentity.*actor"
  L9_37.WindowsIdentity = "WindowsIdentity.*actor"
  L9_37.WindowsPrincipal = "WindowsPrincipal.*actor"
  for L13_41, L14_42 in L10_38(L11_39) do
    L15_43 = string
    L15_43 = L15_43.find
    L15_43 = L15_43(A0_28, L14_42)
    if not L15_43 then
      L15_43 = string
      L15_43 = L15_43.find
      L15_43 = L15_43(L1_29, L14_42)
    end
    if L15_43 ~= nil then
      table.insert(L8_36, string.rep("0", 5 - #tostring(L15_43)) .. L15_43 .. " " .. L13_41)
    end
  end
  L10_38(L11_39)
  if L7_35 == "FsPickler" then
  else
  end
  L10_38 = L8_36 or ""
  L13_41 = ""
  L13_41 = L4_32
  return L11_39, L12_40, L13_41
end
function L3_3(A0_44, A1_45)
  local L2_46, L3_47, L4_48
  L2_46 = ""
  L3_47 = ""
  L4_48 = {}
  for _FORV_9_ = #_UPVALUE0_(A0_44, A1_45), 1, -1 do
    if _UPVALUE1_(_UPVALUE0_(A0_44, A1_45)[_FORV_9_]) ~= "" or _UPVALUE1_(_UPVALUE0_(A0_44, A1_45)[_FORV_9_]) ~= "" then
      table.insert(L4_48, {
        Chain = _UPVALUE1_(_UPVALUE0_(A0_44, A1_45)[_FORV_9_])
      })
    end
    if #L2_46 == 0 then
      L2_46 = _UPVALUE1_(_UPVALUE0_(A0_44, A1_45)[_FORV_9_])
    end
    if #L3_47 == 0 then
      L3_47 = _UPVALUE1_(_UPVALUE0_(A0_44, A1_45)[_FORV_9_])
    end
  end
  return L2_46, L3_47, L4_48
end
L4_4 = mp
L4_4 = L4_4.readprotection
L5_5 = false
L4_4(L5_5)
L4_4 = {}
L5_5 = {}
L6_6 = L3_3
L7_7 = mp
L7_7 = L7_7.readfile
L8_8 = 0
L8_8 = L7_7(L8_8, mp.getfilesize() or 0)
L8_8 = L6_6(L7_7, L8_8, L7_7(L8_8, mp.getfilesize() or 0))
if L6_6 == "" then
  return mp.CLEAN
end
for _FORV_12_, _FORV_13_ in pairs(L8_8) do
  if _FORV_13_.Chain ~= "" then
    table.insert(L4_4, _FORV_13_.Chain .. " (" .. (_FORV_13_.Format or "Unknown Formatter") .. ")")
  end
  if _FORV_13_.Payload ~= "" then
    table.insert(L5_5, _FORV_13_.Payload)
  end
end
table.remove(L4_4, 1)
if #L4_4 > 0 then
  L4_4 = table.concat(L4_4, ", ")
else
  L4_4 = "None"
end
if #L5_5 > 0 then
  L5_5 = table.concat(L5_5, " AND ")
else
  L5_5 = "Unknown"
end
return mp.INFECTED
