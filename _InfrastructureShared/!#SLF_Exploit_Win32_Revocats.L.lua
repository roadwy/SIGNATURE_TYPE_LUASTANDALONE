local L0_0, L1_1, L2_2, L3_3, L4_4, L5_5, L6_6, L7_7, L8_8, L9_9, L10_10, L11_11, L12_12, L13_13, L14_14, L15_15, L16_16
L1_1 = mp
L1_1 = L1_1.get_mpattribute
L2_2 = "RPF:TopLevelFile"
L1_1 = L1_1(L2_2)
if L1_1 then
  L1_1 = mp
  L1_1 = L1_1.get_mpattributevalue
  L2_2 = "RPF:MpCertSz"
  L1_1 = L1_1(L2_2)
  L2_2 = mp
  L2_2 = L2_2.get_mpattributevalue
  L3_3 = "RPF:MpCertStart"
  L2_2 = L2_2(L3_3)
  if L2_2 and L1_1 then
    L3_3 = L1_1 - 8
    if not L3_3 or L3_3 <= 0 or L3_3 > 65536 then
      L4_4 = mp
      L4_4 = L4_4.CLEAN
      return L4_4
    end
    L4_4 = mp
    L4_4 = L4_4.GetCertificateInfoFromFile
    L4_4 = L4_4(L5_5, L6_6, L7_7)
    L0_0 = L4_4
  end
else
  L1_1 = mp
  L1_1 = L1_1.getfilename
  L2_2 = mp
  L2_2 = L2_2.bitor
  L3_3 = mp
  L3_3 = L3_3.FILEPATH_QUERY_FNAME
  L4_4 = mp
  L4_4 = L4_4.FILEPATH_QUERY_LOWERCASE
  L16_16 = L2_2(L3_3, L4_4)
  L1_1 = L1_1(L2_2, L3_3, L4_4, L5_5, L6_6, L7_7, L8_8, L9_9, L10_10, L11_11, L12_12, L13_13, L14_14, L15_15, L16_16, L2_2(L3_3, L4_4))
  if not L1_1 then
    L2_2 = mp
    L2_2 = L2_2.CLEAN
    return L2_2
  end
  L2_2 = string
  L2_2 = L2_2.find
  L3_3 = L1_1
  L4_4 = "/vbaprojectsignature"
  L2_2 = L2_2(L3_3, L4_4, L5_5, L6_6)
  if L2_2 then
    L2_2 = 36
    L3_3 = mp
    L3_3 = L3_3.getfilesize
    L3_3 = L3_3()
    if not L3_3 or L3_3 < 128 then
      L4_4 = mp
      L4_4 = L4_4.CLEAN
      return L4_4
    end
    L4_4 = mp
    L4_4 = L4_4.readprotection
    L4_4(L5_5)
    L4_4 = mp
    L4_4 = L4_4.readfile
    L4_4 = L4_4(L5_5, L6_6)
    L5_5(L6_6)
    if L4_4 then
    elseif L5_5 < 4 then
      return L5_5
    end
    if L5_5 and not (L5_5 > 65536) then
    elseif L3_3 < L6_6 then
      return L6_6
    end
    L8_8 = L5_5
    L9_9 = false
    L0_0 = L6_6
  else
    L2_2 = string
    L2_2 = L2_2.find
    L3_3 = L1_1
    L4_4 = "%->%[scriptsig%]"
    L2_2 = L2_2(L3_3, L4_4)
    if L2_2 then
      L2_2 = mp
      L2_2 = L2_2.getfilesize
      L2_2 = L2_2()
      if not L2_2 or L2_2 > 65536 then
        L3_3 = mp
        L3_3 = L3_3.CLEAN
        return L3_3
      end
      L3_3 = mp
      L3_3 = L3_3.GetCertificateInfoFromFile
      L4_4 = 0
      L3_3 = L3_3(L4_4, L5_5, L6_6)
      L0_0 = L3_3
    end
  end
end
if not L0_0 then
  L1_1 = mp
  L1_1 = L1_1.CLEAN
  return L1_1
end
L1_1 = 13
L2_2 = 16
L3_3 = 16
L4_4 = 0
for L8_8, L9_9 in L5_5(L6_6) do
  L4_4 = L4_4 + 1
  if L2_2 < L4_4 then
    return L10_10
  end
  for L13_13, L14_14 in L10_10(L11_11) do
    if L13_13 > L3_3 then
      L15_15 = mp
      L15_15 = L15_15.CLEAN
      return L15_15
    end
    if L14_14 then
      L15_15 = L14_14.PublicKey
      if L15_15 == "ECC" then
        L15_15 = L14_14.PublicKeyEccCustomCurveBytes
        if L15_15 then
          L15_15 = false
          L16_16 = L14_14.PublicKeyBytes
          if L16_16 then
            L15_15, L8_8 = MpCommon.NdatRegExpMatch(L1_1, L16_16)
          end
          if L15_15 == true then
            return mp.INFECTED
          else
            mp.set_mpattribute("Lua:EccCustomCurve")
          end
        end
      end
    end
  end
end
return L5_5
