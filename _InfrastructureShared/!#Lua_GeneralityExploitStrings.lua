local L0_0, L1_1, L2_2
L0_0 = mp
L0_0 = L0_0.getfilesize
L0_0 = L0_0()
if L0_0 > 300000 then
  L1_1 = mp
  L1_1 = L1_1.CLEAN
  return L1_1
end
L1_1 = mp
L1_1 = L1_1.enum_mpattributesubstring
L2_2 = "SCPT:GeneralityExploitStrRare"
L1_1 = L1_1(L2_2)
L2_2 = mp
L2_2 = L2_2.enum_mpattributesubstring
L2_2 = L2_2("SCPT:GeneralityExploitStrCommon")
if #L1_1 >= 2 or #L1_1 >= 1 and #L2_2 >= 2 then
  if not mp.get_mpattribute("RPF:TopLevelFile") then
    if not ({
      [".zip"] = "",
      [".tar"] = "",
      [".gz"] = "",
      [".tgz"] = ""
    })[string.sub(mp.get_contextdata(mp.CONTEXT_DATA_FILENAME), -5):lower():match("(%.%w+)$")] then
      return mp.CLEAN
    end
  end
  if 1 <= #mp.enum_mpattributesubstring("SCPT:GeneralityCleanStr") then
    return mp.CLEAN
  end
  if #mp.enum_mpattributesubstring("TEL:Exploit:") > 0 then
    return mp.CLEAN
  end
  function make_set(A0_3)
    local L1_4, L2_5, L3_6, L4_7, L5_8, L6_9, L7_10
    L1_4 = {}
    L2_5 = {}
    for L6_9, L7_10 in L3_6(L4_7) do
      if not L1_4[L7_10] then
        L1_4[L7_10] = true
        table.insert(L2_5, L7_10)
      end
    end
    return L2_5
  end
  L1_1 = make_set(mp.enum_mpattributesubstring("SCPT:GeneralityExploitStrRare"))
  L2_2 = make_set(mp.enum_mpattributesubstring("SCPT:GeneralityExploitStrCommon"))
  if #L1_1 >= 2 or #L1_1 >= 1 and #L2_2 >= 2 then
    if mp.getfilename(mp.bitor(mp.FILEPATH_QUERY_FULL, mp.FILEPATH_QUERY_LOWERCASE)):find("\\program files", 1, true) then
      return mp.CLEAN
    end
    if mp.getfilename(mp.bitor(mp.FILEPATH_QUERY_FULL, mp.FILEPATH_QUERY_LOWERCASE)):find("\\system32", 1, true) then
      return mp.CLEAN
    end
    if mp.getfilename(mp.bitor(mp.FILEPATH_QUERY_FULL, mp.FILEPATH_QUERY_LOWERCASE)):find("metasploit", 1, true) then
      return mp.CLEAN
    end
    if mp.getfilename(mp.bitor(mp.FILEPATH_QUERY_FULL, mp.FILEPATH_QUERY_LOWERCASE)):find("nessus", 1, true) then
      return mp.CLEAN
    end
    if mp.getfilename(mp.bitor(mp.FILEPATH_QUERY_FULL, mp.FILEPATH_QUERY_LOWERCASE)):find("kali", 1, true) then
      return mp.CLEAN
    end
    if mp.getfilename(mp.bitor(mp.FILEPATH_QUERY_FULL, mp.FILEPATH_QUERY_LOWERCASE)):find("canvas", 1, true) then
      return mp.CLEAN
    end
    if mp.getfilename(mp.bitor(mp.FILEPATH_QUERY_FULL, mp.FILEPATH_QUERY_LOWERCASE)):find("routersploit", 1, true) then
      return mp.CLEAN
    end
    if mp.getfilename(mp.bitor(mp.FILEPATH_QUERY_FULL, mp.FILEPATH_QUERY_LOWERCASE)):find("ps4-exploit", 1, true) then
      return mp.CLEAN
    end
    if mp.getfilename(mp.bitor(mp.FILEPATH_QUERY_FULL, mp.FILEPATH_QUERY_LOWERCASE)):find("exploitdb", 1, true) then
      return mp.CLEAN
    end
    if mp.getfilename(mp.bitor(mp.FILEPATH_QUERY_FULL, mp.FILEPATH_QUERY_LOWERCASE)):find("packetstorm", 1, true) then
      return mp.CLEAN
    end
    if mp.getfilename(mp.bitor(mp.FILEPATH_QUERY_FULL, mp.FILEPATH_QUERY_LOWERCASE)):find("exploit-database", 1, true) then
      return mp.CLEAN
    end
    if mp.getfilename(mp.bitor(mp.FILEPATH_QUERY_FULL, mp.FILEPATH_QUERY_LOWERCASE)):find("\\ps4", 1, true) then
      return mp.CLEAN
    end
    if mp.getfilename(mp.bitor(mp.FILEPATH_QUERY_FULL, mp.FILEPATH_QUERY_LOWERCASE)):find("\\game", 1, true) then
      return mp.CLEAN
    end
    if mp.getfilename(mp.bitor(mp.FILEPATH_QUERY_FULL, mp.FILEPATH_QUERY_LOWERCASE)):find("\\impact\\", 1, true) then
      return mp.CLEAN
    end
    if mp.getfilename(mp.bitor(mp.FILEPATH_QUERY_FULL, mp.FILEPATH_QUERY_LOWERCASE)):find("\\vulndisco", 1, true) then
      return mp.CLEAN
    end
    if mp.getfilename(mp.bitor(mp.FILEPATH_QUERY_FULL, mp.FILEPATH_QUERY_LOWERCASE)):find("oscp", 1, true) then
      return mp.CLEAN
    end
    if mp.getfilename(mp.bitor(mp.FILEPATH_QUERY_FULL, mp.FILEPATH_QUERY_LOWERCASE)):find("clamav", 1, true) then
      return mp.CLEAN
    end
    if mp.getfilename(mp.bitor(mp.FILEPATH_QUERY_FULL, mp.FILEPATH_QUERY_LOWERCASE)):find("\\orbital", 1, true) then
      return mp.CLEAN
    end
    if mp.getfilename(mp.bitor(mp.FILEPATH_QUERY_FULL, mp.FILEPATH_QUERY_LOWERCASE)):find("part00", 1, true) then
      return mp.CLEAN
    end
    if mp.getfilename(mp.bitor(mp.FILEPATH_QUERY_FULL, mp.FILEPATH_QUERY_LOWERCASE)):find("\\calibre", 1, true) then
      return mp.CLEAN
    end
    if mp.getfilename(mp.bitor(mp.FILEPATH_QUERY_FULL, mp.FILEPATH_QUERY_LOWERCASE)):find("books", 1, true) then
      return mp.CLEAN
    end
    if mp.getfilename(mp.bitor(mp.FILEPATH_QUERY_FULL, mp.FILEPATH_QUERY_LOWERCASE)):find("exploitpack", 1, true) then
      return mp.CLEAN
    end
    if mp.getfilename(mp.bitor(mp.FILEPATH_QUERY_FULL, mp.FILEPATH_QUERY_LOWERCASE)):find("logs\\", 1, true) then
      return mp.CLEAN
    end
    if mp.getfilename(mp.bitor(mp.FILEPATH_QUERY_FULL, mp.FILEPATH_QUERY_LOWERCASE)):find("advisory", 1, true) then
      return mp.CLEAN
    end
    if mp.getfilename(mp.bitor(mp.FILEPATH_QUERY_FULL, mp.FILEPATH_QUERY_LOWERCASE)):find("\\docs\\freebsd\\", 1, true) then
      return mp.CLEAN
    end
    if mp.getfilename(mp.bitor(mp.FILEPATH_QUERY_FULL, mp.FILEPATH_QUERY_LOWERCASE)):find("infection_monkey", 1, true) then
      return mp.CLEAN
    end
    if mp.getfilename(mp.bitor(mp.FILEPATH_QUERY_FULL, mp.FILEPATH_QUERY_LOWERCASE)):find("\\ioc", 1, true) then
      return mp.CLEAN
    end
    if mp.getfilename(mp.bitor(mp.FILEPATH_QUERY_FULL, mp.FILEPATH_QUERY_LOWERCASE)):find("smb_nt_trans", 1, true) then
      return mp.CLEAN
    end
    if mp.getfilename(mp.bitor(mp.FILEPATH_QUERY_FULL, mp.FILEPATH_QUERY_LOWERCASE)):find("ropmaker", 1, true) then
      return mp.CLEAN
    end
    if mp.getfilename(mp.bitor(mp.FILEPATH_QUERY_FULL, mp.FILEPATH_QUERY_LOWERCASE)):find("chatlog", 1, true) then
      return mp.CLEAN
    end
    if mp.getfilename(mp.bitor(mp.FILEPATH_QUERY_FULL, mp.FILEPATH_QUERY_LOWERCASE)):find("ctf", 1, true) then
      return mp.CLEAN
    end
    if mp.getfilename(mp.bitor(mp.FILEPATH_QUERY_FULL, mp.FILEPATH_QUERY_LOWERCASE)):find("picus", 1, true) then
      return mp.CLEAN
    end
    if mp.getfilename(mp.bitor(mp.FILEPATH_QUERY_FULL, mp.FILEPATH_QUERY_LOWERCASE)):find("\\test\\es6\\", 1, true) then
      return mp.CLEAN
    end
    if mp.getfilename(mp.bitor(mp.FILEPATH_QUERY_FULL, mp.FILEPATH_QUERY_LOWERCASE)):find("\\js\\chunk-", 1, true) then
      return mp.CLEAN
    end
    if mp.getfilename(mp.bitor(mp.FILEPATH_QUERY_FULL, mp.FILEPATH_QUERY_LOWERCASE)):find("\\embedded\\framework\\", 1, true) then
      return mp.CLEAN
    end
    if mp.getfilename(mp.bitor(mp.FILEPATH_QUERY_FULL, mp.FILEPATH_QUERY_LOWERCASE)):find("\\regress-", 1, true) then
      return mp.CLEAN
    end
    if mp.getfilename(mp.bitor(mp.FILEPATH_QUERY_FULL, mp.FILEPATH_QUERY_LOWERCASE)):find("chrome\\user data\\default\\extensions\\", 1, true) then
      return mp.CLEAN
    end
    if mp.getfilename(mp.bitor(mp.FILEPATH_QUERY_FULL, mp.FILEPATH_QUERY_LOWERCASE)):find("\\chakracore\\test\\", 1, true) then
      return mp.CLEAN
    end
    if mp.getfilename(mp.bitor(mp.FILEPATH_QUERY_FULL, mp.FILEPATH_QUERY_LOWERCASE)):find("\\wp-content\\", 1, true) then
      return mp.CLEAN
    end
    if mp.getfilename(mp.bitor(mp.FILEPATH_QUERY_FULL, mp.FILEPATH_QUERY_LOWERCASE)):find("fuzzdb", 1, true) then
      return mp.CLEAN
    end
    if mp.getfilename(mp.bitor(mp.FILEPATH_QUERY_FULL, mp.FILEPATH_QUERY_LOWERCASE)):find("\\winamax", 1, true) then
      return mp.CLEAN
    end
    if mp.getfilename(mp.bitor(mp.FILEPATH_QUERY_FULL, mp.FILEPATH_QUERY_LOWERCASE)):find("\\bug_finder_example", 1, true) then
      return mp.CLEAN
    end
    if mp.getfilename(mp.bitor(mp.FILEPATH_QUERY_FULL, mp.FILEPATH_QUERY_LOWERCASE)):find("\\milw0rm.com\\", 1, true) then
      return mp.CLEAN
    end
    if mp.getfilename(mp.bitor(mp.FILEPATH_QUERY_FULL, mp.FILEPATH_QUERY_LOWERCASE)):find("\\cat-s\\", 1, true) then
      return mp.CLEAN
    end
    if mp.getfilename(mp.bitor(mp.FILEPATH_QUERY_FULL, mp.FILEPATH_QUERY_LOWERCASE)):find("\\ps3", 1, true) then
      return mp.CLEAN
    end
    if mp.getfilename(mp.bitor(mp.FILEPATH_QUERY_FULL, mp.FILEPATH_QUERY_LOWERCASE)):find("\\hackthebox", 1, true) then
      return mp.CLEAN
    end
    if mp.getfilename(mp.bitor(mp.FILEPATH_QUERY_FULL, mp.FILEPATH_QUERY_LOWERCASE)):find("\\antsword", 1, true) then
      return mp.CLEAN
    end
    if mp.getfilename(mp.bitor(mp.FILEPATH_QUERY_FULL, mp.FILEPATH_QUERY_LOWERCASE)):find("\\discord", 1, true) then
      return mp.CLEAN
    end
    if mp.getfilename(mp.bitor(mp.FILEPATH_QUERY_FULL, mp.FILEPATH_QUERY_LOWERCASE)):find("\\east-master", 1, true) then
      return mp.CLEAN
    end
    if mp.getfilename(mp.bitor(mp.FILEPATH_QUERY_FULL, mp.FILEPATH_QUERY_LOWERCASE)):find("\\steamapps\\", 1, true) then
      return mp.CLEAN
    end
    if mp.getfilename(mp.bitor(mp.FILEPATH_QUERY_FULL, mp.FILEPATH_QUERY_LOWERCASE)):find("github", 1, true) then
      return mp.CLEAN
    end
    if mp.getfilename(mp.bitor(mp.FILEPATH_QUERY_FULL, mp.FILEPATH_QUERY_LOWERCASE)):find("immunity\\exploits", 1, true) then
      return mp.CLEAN
    end
    if mp.getfilename(mp.bitor(mp.FILEPATH_QUERY_FULL, mp.FILEPATH_QUERY_LOWERCASE)):find("exploitsdb-master", 1, true) then
      return mp.CLEAN
    end
    if mp.getfilename(mp.bitor(mp.FILEPATH_QUERY_FULL, mp.FILEPATH_QUERY_LOWERCASE)):find("\\homework", 1, true) then
      return mp.CLEAN
    end
    if mp.getfilename(mp.bitor(mp.FILEPATH_QUERY_FULL, mp.FILEPATH_QUERY_LOWERCASE)):find("\\nsemail", 1, true) then
      return mp.CLEAN
    end
    if mp.getfilename(mp.bitor(mp.FILEPATH_QUERY_FULL, mp.FILEPATH_QUERY_LOWERCASE)):find("\\d2sec", 1, true) then
      return mp.CLEAN
    end
    if mp.getfilename(mp.bitor(mp.FILEPATH_QUERY_FULL, mp.FILEPATH_QUERY_LOWERCASE)):find("\\servicedesk", 1, true) then
      return mp.CLEAN
    end
    if mp.getfilename(mp.bitor(mp.FILEPATH_QUERY_FULL, mp.FILEPATH_QUERY_LOWERCASE)):find("\\windows\\imecache\\", 1, true) then
      return mp.CLEAN
    end
    if ({
      [".js"] = "",
      [".html"] = "",
      [".wasm"] = "",
      [".wat"] = ""
    })[string.sub(mp.getfilename(mp.bitor(mp.FILEPATH_QUERY_FNAME, mp.FILEPATH_QUERY_LOWERCASE)), -5):match("(%.%w+)$")] then
      mp.set_mpattribute("Lua:GeneralityExploitBrowser")
    end
    if ({
      [".c"] = "",
      [".cpp"] = "",
      [".cxx"] = "",
      [".h"] = "",
      [".m"] = "",
      [".md"] = "",
      [".txt"] = "",
      [".bin"] = "",
      [".asm"] = ""
    })[string.sub(mp.getfilename(mp.bitor(mp.FILEPATH_QUERY_FNAME, mp.FILEPATH_QUERY_LOWERCASE)), -5):match("(%.%w+)$")] then
      mp.set_mpattribute("Lua:GeneralityExploitCpp")
    end
    if ({
      [".py"] = "",
      [".pyc"] = "",
      [".ps1"] = "",
      [".vbs"] = "",
      [".vba"] = "",
      [".sh"] = ""
    })[string.sub(mp.getfilename(mp.bitor(mp.FILEPATH_QUERY_FNAME, mp.FILEPATH_QUERY_LOWERCASE)), -5):match("(%.%w+)$")] then
      mp.set_mpattribute("Lua:GeneralityExploitScript")
      if 1 <= #mp.enum_mpattributesubstring("SCPT:GeneralityIoT") then
        mp.set_mpattribute("Lua:GeneralityExploitIoT")
      end
    end
    return mp.INFECTED
  end
end
return mp.CLEAN
